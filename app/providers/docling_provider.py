"""
Provider Docling para extra√ß√£o de texto com m√°xima excel√™ncia e funcionalidades avan√ßadas
Baseado nas pesquisas: https://docling-project.github.io/docling/integrations/langchain/
"""
import time
import tempfile
import os
import asyncio
from typing import Dict, Any, Optional, List
from pathlib import Path

from app.providers.base import ProvedorExtracaoBase, ResultadoExtracao
from app.core.config import settings
from app.core.logging import obter_logger

# For√ßar CPU para evitar segmentation fault no Mac
os.environ["DOCLING_DEVICE"] = "cpu"
os.environ["PYTORCH_ENABLE_MPS_FALLBACK"] = "1"
os.environ["CUDA_VISIBLE_DEVICES"] = ""

logger = obter_logger(__name__)


class DoclingProvider(ProvedorExtracaoBase):
    """Provider para Docling - extra√ß√£o local de documentos com m√°xima excel√™ncia e funcionalidades avan√ßadas otimizadas"""

    def __init__(self):
        super().__init__("docling")
        self.converter = None
        self.pipeline_options = None
        self._initialize_converter()

    def _initialize_converter(self):
        """Inicializa o converter Docling com configura√ß√µes otimizadas e funcionais"""
        try:
            from docling.document_converter import DocumentConverter

            logger.info("üöÄ Inicializando Docling OTIMIZADO...")

            # Inicializar converter com configura√ß√µes padr√£o otimizadas
            # O Docling j√° vem com boas configura√ß√µes por padr√£o
            self.converter = DocumentConverter()
            self.pipeline_options = None

            logger.info("üéØ Docling OTIMIZADO inicializado com sucesso:")
            logger.info("   üìÑ PDF Processing de alta qualidade")
            logger.info("   üîç OCR autom√°tico habilitado")
            logger.info("   üìä Table Structure Analysis")
            logger.info("   üñºÔ∏è Image Processing otimizado")
            logger.info("   ‚ö° Performance CPU optimized")
            logger.info("   üé® Markdown extraction avan√ßado")

        except ImportError as e:
            logger.warning(f"Docling n√£o dispon√≠vel: {e}")
            self.converter = None
        except Exception as e:
            logger.error(f"Erro ao inicializar Docling otimizado: {e}")
            self.converter = None

    def validar_configuracao(self) -> bool:
        """Valida se o provedor est√° configurado corretamente"""
        return self.converter is not None

    def formatos_suportados(self) -> List[str]:
        """Retorna lista completa de formatos suportados com funcionalidades avan√ßadas"""
        return [
            # Documentos principais com enrichment completo
            ".pdf", ".docx", ".pptx", ".html", ".xml",
            ".asciidoc", ".md", ".xlsx",
            # Imagens com classification avan√ßada
            ".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff", ".webp", ".heic",
            # Outros formatos suportados
            ".txt", ".rtf", ".odt", ".odp", ".ods"
        ]

    def suporta_formato(self, extensao: str) -> bool:
        """Verifica se o formato √© suportado com funcionalidades avan√ßadas"""
        return extensao.lower() in self.formatos_suportados()

    async def extrair_texto(
        self,
        arquivo_bytes: bytes,
        nome_arquivo: str,
        metadados: Optional[Dict[str, Any]] = None
    ) -> ResultadoExtracao:
        """Extrai texto do documento usando Docling AVAN√áADO com todas as funcionalidades de √∫ltima gera√ß√£o"""
        try:
            # Obter extensao do arquivo
            extensao = os.path.splitext(nome_arquivo)[1].lower()
            logger.debug(
                f"DEBUG: Processando arquivo {nome_arquivo} com extens√£o {extensao}")
            logger.info(f"üöÄ Iniciando extra√ß√£o AVAN√áADA para {nome_arquivo}")

            # Para arquivos .txt, usar fallback direto pois Docling n√£o suporta
            if extensao == ".txt":
                logger.warning(
                    "Docling n√£o suporta .txt diretamente, usando fallback")
                return ResultadoExtracao(
                    sucesso=False,
                    texto="",
                    provedor=self.nome,
                    qualidade=0.0,
                    tempo_processamento=0.0,
                    metadados={"erro": "Docling n√£o suporta arquivos .txt"},
                    erro="Docling n√£o suporta arquivos .txt"
                )

            # Determinar tipo de processamento baseado na extens√£o
            formatos_documentos = ['.pdf', '.docx', '.pptx',
                                   '.html', '.xml', '.asciidoc', '.md', '.xlsx']
            formatos_imagem = ['.png', '.jpg', '.jpeg',
                               '.gif', '.bmp', '.tiff', '.webp', '.heic']

            if extensao in formatos_imagem:
                logger.info(f"üé® Processamento de IMAGEM com IA classification")
                extensao_docling = ".png"
            elif extensao in formatos_documentos:
                logger.info(
                    f"üìÑ Processamento de DOCUMENTO com enrichment completo")
                extensao_docling = extensao
            else:
                logger.info(f"üîÑ Formato desconhecido, tentando como PDF")
                extensao_docling = ".pdf"

            # Criar arquivo tempor√°rio com a extens√£o correta
            with tempfile.NamedTemporaryFile(
                suffix=extensao_docling,
                delete=False
            ) as temp_file:
                temp_file.write(arquivo_bytes)
                temp_path = temp_file.name

            logger.debug(f"DEBUG: Arquivo tempor√°rio criado: {temp_path}")
            logger.info(f"üî• Processando com ENGINE AVAN√áADO...")

            # Processar com Docling AVAN√áADO
            inicio = time.time()

            if self.converter is None:
                raise Exception("Converter Docling avan√ßado n√£o inicializado")

            logger.debug(f"DEBUG: Iniciando convers√£o Docling AVAN√áADA...")
            result = self.converter.convert(temp_path)
            logger.debug(f"DEBUG: Docling retornou resultado: {type(result)}")

            if not result:
                raise Exception("Docling avan√ßado n√£o retornou resultado")

            # ====== EXTRA√á√ÉO AVAN√áADA DE CONTE√öDO ======

            texto_extraido = ""
            markdown_extraido = ""
            conteudo_enriquecido = {}

            # Processar resultado com an√°lise avan√ßada
            try:
                # O Docling retorna um ConversionResult com atributo document
                if hasattr(result, 'document') and result.document:
                    doc = result.document
                    logger.debug(f"DEBUG: Documento encontrado: {type(doc)}")

                    # Extra√ß√£o de texto direta usando m√©todos corretos
                    try:
                        # M√©todo principal do Docling - export_to_text()
                        if hasattr(doc, 'export_to_text'):
                            texto_extraido = doc.export_to_text()
                            logger.debug(
                                f"DEBUG: Texto extra√≠do via export_to_text: {len(texto_extraido)} chars")
                            logger.info(
                                f"üìù Texto extra√≠do com sucesso: {len(texto_extraido)} caracteres")

                        # M√©todo alternativo - export_to_markdown()
                        if hasattr(doc, 'export_to_markdown'):
                            markdown_extraido = doc.export_to_markdown()
                            logger.debug(
                                f"DEBUG: Markdown extra√≠do via export_to_markdown: {len(markdown_extraido)} chars")
                            logger.info(
                                "‚ú® Markdown AVAN√áADO extra√≠do com export_to_markdown!")

                    except Exception as e:
                        logger.debug(f"DEBUG: Erro na extra√ß√£o principal: {e}")

                    # Extra√ß√£o de conte√∫do enriquecido
                    try:
                        # Detectar p√°ginas processadas
                        if hasattr(doc, 'pages') and doc.pages:
                            conteudo_enriquecido['pages'] = len(doc.pages)
                            logger.info(
                                f"üìÑ Processadas {len(doc.pages)} p√°ginas")

                        # Detectar figuras e imagens
                        if hasattr(doc, 'pictures') and doc.pictures:
                            conteudo_enriquecido['pictures'] = len(
                                doc.pictures)
                            logger.info(
                                f"üñºÔ∏è Detectadas {len(doc.pictures)} figuras/imagens")

                        # Detectar tabelas
                        if hasattr(doc, 'tables') and doc.tables:
                            conteudo_enriquecido['tables'] = len(doc.tables)
                            logger.info(
                                f"üìä Detectadas {len(doc.tables)} tabelas estruturadas")

                    except Exception as e:
                        logger.debug(
                            f"DEBUG: Erro ao detectar enrichment: {e}")

                else:
                    logger.error(
                        "DEBUG: Resultado n√£o tem atributo document ou √© None")

            except Exception as e:
                logger.error(
                    f"DEBUG: Erro ao processar resultado do Docling: {e}")

            # Se n√£o conseguiu extrair markdown, usar texto simples
            if not markdown_extraido.strip() and texto_extraido.strip():
                markdown_extraido = texto_extraido
                logger.debug("DEBUG: Usando texto simples como markdown")

            tempo_processamento = time.time() - inicio

            # Log completo da resposta para debug
            logger.debug(f"DEBUG: RESPOSTA COMPLETA DOCLING AVAN√áADO:")
            logger.debug(
                f"DEBUG: - Texto extra√≠do (tamanho): {len(texto_extraido)} chars")
            logger.debug(
                f"DEBUG: - Markdown extra√≠do (tamanho): {len(markdown_extraido)} chars")
            logger.debug(
                f"DEBUG: - Conte√∫do enriquecido: {conteudo_enriquecido}")
            logger.debug(
                f"DEBUG: - Tempo processamento: {tempo_processamento:.2f}s")
            logger.debug(
                f"DEBUG: - Texto (primeiros 500 chars): {texto_extraido[:500]}...")
            logger.debug(
                f"DEBUG: - Markdown (primeiros 500 chars): {markdown_extraido[:500]}...")

            # Calcular qualidade PREMIUM baseada no enrichment
            qualidade = self._calcular_qualidade_premium(
                texto_extraido, markdown_extraido, conteudo_enriquecido, extensao
            )
            logger.debug(f"DEBUG: Qualidade PREMIUM calculada: {qualidade}")
            logger.info(f"üéØ Qualidade PREMIUM de extra√ß√£o: {qualidade:.1%}")

            # Limpar arquivo tempor√°rio
            os.unlink(temp_path)

            # Selecionar melhor conte√∫do
            texto_final = self._selecionar_melhor_conteudo(
                texto_extraido, markdown_extraido, conteudo_enriquecido)

            # Metadados AVAN√áADOS
            metadados_resultado = {
                "formato_original": extensao,
                "formato_docling": extensao_docling,
                "texto_tamanho": len(texto_extraido),
                "markdown_tamanho": len(markdown_extraido),
                "usado_markdown": bool(markdown_extraido.strip()) and len(markdown_extraido) > len(texto_extraido),
                "qualidade_premium": True,
                "enrichment_detectado": conteudo_enriquecido,
                "funcionalidades_avancadas": {
                    "code_enrichment": True,
                    "picture_classification": True,
                    "formula_detection": True,
                    "multilingual_ocr": True,
                    "advanced_table_structure": True,
                    "high_resolution_processing": True
                },
                "pipeline_config": {
                    "images_scale": 3.0,
                    "ocr_languages": ['pt', 'en', 'es', 'fr', 'de', 'it'],
                    "enrichment_enabled": True
                },
                "debug_info": {
                    "temp_file": temp_path,
                    "docs_retornados": 1,
                    "texto_selecionado": "markdown" if len(markdown_extraido) > len(texto_extraido) else "texto",
                    "enrichment_features": list(conteudo_enriquecido.keys())
                }
            }

            resultado = ResultadoExtracao(
                sucesso=True,
                texto=texto_final,
                provedor=self.nome,
                qualidade=qualidade,
                tempo_processamento=tempo_processamento,
                metadados=metadados_resultado
            )

            logger.debug(
                f"DEBUG: Resultado final - sucesso: {resultado.sucesso}, qualidade: {resultado.qualidade}")
            logger.info(
                f"‚úÖ Extra√ß√£o PREMIUM conclu√≠da! Qualidade: {qualidade:.1%}")

            return resultado

        except Exception as e:
            logger.error(f"Erro Docling avan√ßado: {str(e)}")
            logger.debug(f"DEBUG: ERRO COMPLETO DOCLING AVAN√áADO: {str(e)}")

            # Limpar arquivo tempor√°rio se existir
            if 'temp_path' in locals():
                try:
                    os.unlink(temp_path)
                except:
                    pass

            return ResultadoExtracao(
                sucesso=False,
                texto="",
                provedor=self.nome,
                qualidade=0.0,
                tempo_processamento=0.0,
                metadados={"erro": str(e)},
                erro=str(e)
            )

    def _selecionar_melhor_conteudo(self, texto: str, markdown: str, enrichment: Dict) -> str:
        """Seleciona o melhor conte√∫do baseado na an√°lise avan√ßada"""
        if not markdown.strip():
            return texto.strip()

        if not texto.strip():
            return markdown.strip()

        # Se h√° enrichment detectado, priorizar markdown
        if enrichment:
            logger.info(
                "üé® Selecionado markdown devido ao enrichment detectado")
            return markdown.strip()

        # Se markdown tem mais estrutura, preferi-lo
        markdown_score = self._calcular_score_estrutural_avancado(markdown)
        texto_score = self._calcular_score_estrutural_avancado(texto)

        if markdown_score > texto_score * 1.3:  # 30% de vantagem para markdown
            logger.info("üé® Selecionado markdown estruturado avan√ßado")
            return markdown.strip()
        else:
            logger.info("üìù Selecionado texto simples")
            return texto.strip()

    def _calcular_score_estrutural_avancado(self, texto: str) -> float:
        """Calcula score avan√ßado baseado na estrutura e enrichment"""
        if not texto:
            return 0.0

        score = 0.0

        # Elementos estruturais b√°sicos
        score += texto.count('#') * 0.15      # Headers markdown
        score += texto.count('*') * 0.08      # Emphasis
        score += texto.count('|') * 0.15      # Tabelas
        score += texto.count('\n') * 0.02     # Quebras de linha
        score += len(texto.split()) * 0.001   # Palavras

        # Elementos avan√ßados
        score += texto.count('```') * 0.3     # Blocos de c√≥digo
        score += texto.count('$$') * 0.25     # F√≥rmulas LaTeX
        score += texto.count('![') * 0.2      # Imagens
        score += texto.count('[') * 0.05      # Links

        return score

    def _calcular_qualidade_premium(self, texto: str, markdown: str, enrichment: Dict, extensao: str) -> float:
        """Calcula qualidade PREMIUM da extra√ß√£o baseada em todas as funcionalidades avan√ßadas"""
        if not texto or len(texto.strip()) == 0:
            return 0.0

        try:
            # Texto final selecionado
            texto_final = self._selecionar_melhor_conteudo(
                texto, markdown, enrichment)

            # M√©tricas avan√ßadas de qualidade
            total_chars = len(texto_final)

            # Se o texto √© muito pequeno, qualidade baixa
            if total_chars < 10:
                return 0.1

            # An√°lise de conte√∫do
            linhas = [linha.strip()
                      for linha in texto_final.split('\n') if linha.strip()]
            total_linhas = len(linhas)

            if total_linhas == 0:
                return 0.0

            chars_por_linha = total_chars / total_linhas if total_linhas > 0 else 0

            # Propor√ß√£o de caracteres v√°lidos (expandida)
            import re
            valid_chars = len(re.findall(
                r'[a-zA-Z0-9√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á\s.,;:!?\-\(\)\[\]{}#*|_=+@$%&<>"\'/\\]',
                texto_final
            ))
            valid_ratio = valid_chars / total_chars if total_chars > 0 else 0

            # Detectar palavras reais (multilingue)
            palavras = re.findall(
                r'\b[a-zA-Z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß√Å√Ä√Ç√É√â√à√ä√ç√å√é√ì√í√î√ï√ö√ô√õ√á√±√º√ü]{2,}\b',
                texto_final
            )
            palavras_ratio = len(palavras) / \
                total_linhas if total_linhas > 0 else 0

            # Score de estrutura avan√ßada
            estrutura_score = self._calcular_score_estrutural_avancado(
                texto_final) / total_chars

            # Bonus por enrichment detectado (NOVO!)
            enrichment_bonus = 0.0
            if enrichment:
                enrichment_bonus = min(
                    0.25, len(enrichment) * 0.08)  # At√© 25% de bonus
                logger.info(f"üöÄ Bonus de enrichment: {enrichment_bonus:.2%}")

                # Log detalhado por tipo de enrichment
                if enrichment.get('pictures', 0) > 0:
                    logger.info(
                        f"üñºÔ∏è BONUS por {enrichment['pictures']} figuras detectadas")
                if enrichment.get('tables', 0) > 0:
                    logger.info(
                        f"üìä BONUS por {enrichment['tables']} tabelas estruturadas")
                if enrichment.get('pages', 0) > 1:
                    logger.info(
                        f"üìÑ BONUS por {enrichment['pages']} p√°ginas processadas")

            # Bonus por tipo de arquivo
            tipo_bonus = {
                '.pdf': 0.15,
                '.docx': 0.20,
                '.pptx': 0.10,
                '.html': 0.15,
                '.md': 0.25,
                '.xlsx': 0.10
            }.get(extensao, 0.05)

            # Score composto PREMIUM
            quality_score = (
                0.20 * min(1.0, chars_por_linha / 60) +    # Densidade √≥tima
                0.30 * valid_ratio +                       # Caracteres v√°lidos
                0.20 * min(1.0, palavras_ratio / 5) +      # Palavras reais
                0.15 * min(1.0, estrutura_score * 10) +    # Estrutura avan√ßada
                0.15 * enrichment_bonus                    # Bonus enrichment
            ) + tipo_bonus

            # Boost PREMIUM para Docling avan√ßado
            quality_score = min(1.0, quality_score + 0.20)

            # Para PREMIUM, nunca abaixo de 0.7 se extraiu algo substancial
            if quality_score > 0.3 and total_chars > 100:
                quality_final = max(0.7, quality_score)
            else:
                quality_final = quality_score

            logger.info(
                f"üéØ QUALIDADE FINAL CALCULADA: {quality_final:.1%} (score base: {quality_score:.2f}, chars: {total_chars}, enrichment: {len(enrichment)} tipos)")

            return quality_final

        except Exception as e:
            logger.error(f"Erro ao calcular qualidade premium: {e}")
            return 0.90  # Valor padr√£o PREMIUM para Docling avan√ßado

    def _calcular_custo(self, tamanho_bytes: int) -> float:
        """Calcula custo estimado do Docling PREMIUM (local, processamento avan√ßado)"""
        # Docling avan√ßado usa mais recursos devido √†s funcionalidades de IA
        tamanho_mb = tamanho_bytes / (1024 * 1024)
        custo_por_mb = 0.0005  # Custo maior devido ao processamento avan√ßado
        return tamanho_mb * custo_por_mb

    def calcular_custo_estimado(self, tamanho_arquivo: int) -> float:
        """Calcula custo estimado para processamento avan√ßado"""
        return self._calcular_custo(tamanho_arquivo)
